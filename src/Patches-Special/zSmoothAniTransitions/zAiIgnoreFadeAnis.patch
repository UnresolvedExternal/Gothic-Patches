#engine [G1, G1A, G2, G2A]
	#patch [zAiIgnoreFadeAnis]
		// engine specific
		INT engine_version = ZenDef(1, 2, 3, 4)
		
		INT text_oCNpc_InteractItemIsInState_call_model_IsAniActive_or_GetAniFromAniID = ZenDef(0x006AF7F8, 0x006E35E8, 0x006F6679, 0x007554A9) 
		INT text_oCNpc_SetWeaponMode2_jz_standing = ZenDef(0x00695EB6, 0x006C7964, 0x006DAB79, 0x007392C4)
		INT text_oCNpc_EV_DrawWeapon2_call_model_GetAniFromAniID_1 = ZenDef(0x006A932E, 0x006DC0E7, 0x006EED1E, 0x0074DA8E)
		INT text_oCNpc_EV_DrawWeapon2_call_model_GetAniFromAniID_2 = ZenDef(0x006A9351, 0x006DC137, 0x006EED41, 0x0074DAB1)
		INT text_oCNpc_EV_AttackForward_mov_edi_ptr_edx = ZenDef(0x006AAF70, 0x006DDD38, 0x006F1353, 0x00750133)
		INT text_oCNpc_EV_AttackForward_mov_edi_ptr_edx_after = text_oCNpc_EV_AttackForward_mov_edi_ptr_edx + 6
		INT text_oCNpc_EV_AttackForward_epilogue = ZenDef(0x006AAF37, 0x006DDD48, 0x006F136A, 0x0075014A)
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G1 = 0x0061077D
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G1_G1 = 0x006109F3
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G1_G1 = 0x00610A40
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G1A = 0x00633475
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_edx__s_hitf_G1_G1A = 0x006336CD
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_edx__t_hitback_G1_G1A = 0x00633731
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G2 = 0x00639935
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_hitf_G1_G2 = 0x00639B4D
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__t_hitback_G1_G2 = 0x00639BBB
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G2_G2 = 0x00639CEF
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G2_G2 = 0x00639FA1
		INT text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G2_G2 = 0x0063A001
		INT text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_aim_G1_G2A = 0x006960D0
		INT text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_hitf_G1_G2A = 0x00696100
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__t_hitback_G1_G2A = 0x00696332
		INT text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G2_G2A = 0x0069655C
		INT text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__s_hitf_G2_G2A = 0x00696840
		INT text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__t_hitback_G2_G2A = 0x00696890
		INT text_oCAIHuman_BowMode_call_IsStateAniActive__s_aim_G1 = ZenDef(0x006108FB, 0x006335FA, 0x00639AB7, 0x006962B5)
		INT text_oCAIHuman_BowMode_call_IsStateAniActive__s_aim_G2 = ZenDef(0x00000000, 0x00000000, 0x00639E9A, 0x00696707)
		INT text_oCAIHuman_BowMode_call_IsStanding_G1 = ZenDef(0x00610A59, 0x00633794, 0x00639BFE, 0x0069636A)
		INT text_oCAIHuman_BowMode_call_IsStanding_G2 = ZenDef(0x00000000, 0x00000000, 0x0063A03B, 0x006968C9)
		INT text_oCAIHuman_PC_SpecialMove_SetDoJump_1 = ZenDef(0x0061389C, 0x00636C72, 0x0063D6BB, 0x00699F0B)
		INT text_oCAIHuman_PC_SpecialMove_SetDoJump_2 = ZenDef(0x006138AC, 0x00636C84, 0x0063D6F3, 0x00699F43)
		INT text_oCAIHuman_PC_SpecialMove_SetDoJump_3 = ZenDef(0x00000000, 0x00000000, 0x0063D705, 0x00699F55)
		INT text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_jump = ZenDef(0x00612EE2, 0x006361E2, 0x0063CCF2, 0x00699542)
		INT text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_hang = ZenDef(0x006130C1, 0x006363FF, 0x0063CED1, 0x00699721)
		INT text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_woundedb = ZenDef(0x00613403, 0x006367B3, 0x0063D213, 0x00699A63)
		INT text_oCAIHuman_PC_CheckSpecialStates_cmp_ptr_edi_protoAni = ZenDef(0x00613512, 0x006368CD, 0x0063D322, 0x00699B72)
		INT text_oCAniCtrl_Human_CheckSpecialStates_call_SetPhysicsEnabled = ZenDef(0x0062B2E7, 0x0065080A, 0x00657C87, 0x006B4617)
		INT text_oCAniCtrl_Human_GetLayerAni_mov_ebx_ptr_eax = ZenDef(0x00627258, 0x0064C288, 0x00653518, 0x006AFD98)
		INT text_oCAniCtrl_Human_CheckFallStates_call_model_IsStateActive_s_falldn = ZenDef(0x0062C2FD, 0x0065191D, 0x00658F8D, 0x006B591D)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_1 = ZenDef(0x00625A76, 0x0064A816, 0x00651D38, 0x006AE5B8)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_2 = ZenDef(0x00625A94, 0x0064A837, 0x00651D56, 0x006AE5D6)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_3 = ZenDef(0x00625ADF, 0x0064A882, 0x00651DA1, 0x006AE621)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_4 = ZenDef(0x00625B44, 0x0064A8F1, 0x00651E06, 0x006AE686)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_5 = ZenDef(0x00625BA4, 0x0064A95B, 0x00651E66, 0x006AE6E6)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_6 = ZenDef(0x00625C27, 0x0064AA3E, 0x00651EE7, 0x006AE767)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_7 = ZenDef(0x00625C68, 0x0064AA82, 0x00651F28, 0x006AE7A8)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_8 = ZenDef(0x00625DBD, 0x0064ABB5, 0x00652061, 0x006AE8E1)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_9 = ZenDef(0x00625E22, 0x0064AC15, 0x006520B2, 0x006AE932)
		INT text_oCAniCtrl_Human_Turn_call_model_IsAniActive_10 = ZenDef(0x00000000, 0x00000000, 0x006520FA, 0x006AE97A)
		INT text_oCAniCtrl_Human_TransitionToInvest_mov_ebp_ptr_esi__s_walk_G1 = ZenDef(0x0062EC01, 0x0065448A, 0x00000000, 0x00000000)
		INT text_oCAniCtrl_Human_TransitionToInvest_call_model_IsAniActive_G2 = ZenDef(0x00000000, 0x00000000, 0x0065B9FD, 0x006B838D)
		INT text_oCAniCtrl_Human_IsParadeRunning_cmp_layer_G1 = ZenDef(0x00628485, 0x0064D585, 0x00000000, 0x00000000)
		INT text_oCAniCtrl_Human_IsParadeRunning_inc_eax_G1 = text_oCAniCtrl_Human_IsParadeRunning_cmp_layer_G1 + 6
		INT text_oCAniCtrl_Human_IsParadeRunning_ani_check_success_G2 = ZenDef(0x00000000, 0x00000000, 0x00654BDE, 0x006B156E)
		INT text_oCAniCtrl_Human_IsParadeRunning_ani_check_fail_G2 = ZenDef(0x00000000, 0x00000000, 0x00654BF5, 0x006B1585)
		INT text_oCAniCtrl_Human_CanParade_cmp_layer_G1 = ZenDef(0x006284E8, 0x0064D5E8, 0x00000000, 0x00000000)
		INT text_oCAniCtrl_Human_CanParade_inc_eax_G1 = text_oCAniCtrl_Human_CanParade_cmp_layer_G1 + 6
		INT text_oCAniCtrl_Human_CanParade_ani_check_success_G2 = ZenDef(0x00000000, 0x00000000, 0x00654C49, 0x006B15D9)
		INT text_oCAniCtrl_Human_CanParade_ani_check_fail_G2 = ZenDef(0x00000000, 0x00000000, 0x00654C60, 0x006B15F0)
		INT text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_1 = ZenDef(0x0062E1A1, 0x006539A1, 0x0065AFB1, 0x006B7941)
		INT text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_2 = ZenDef(0x0062E215, 0x00653A15, 0x0065B025, 0x006B79B5)
		INT text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_3 = ZenDef(0x0062E280, 0x00653A80, 0x0065B090, 0x006B7A20)
		INT text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_4 = ZenDef(0x0062E2BA, 0x00653AC0, 0x0065B0CA, 0x006B7A5A)
		INT text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_5 = ZenDef(0x0062E326, 0x00653B2C, 0x0065B136, 0x006B7AC6)
		INT text_oCAniCtrl_Human__Forward_call_model_IsAniActive = ZenDef(0x0062E3BC, 0x00653BC9, 0x0065B1CC, 0x006B7B5C)
		INT text_oCAniCtrl_Human_IsStateAniActive_cmp_layer = ZenDef(0x006255AC, 0x0064A2DC, 0x0065162C, 0x006ADEAC)
		INT text_oCAniCtrl_Human_IsStateAniActive_fail_cmp_layer = ZenDef(0x006255BB, 0x0064A2EB, 0x0065163B, 0x006ADEBB)
		INT text_oCAniCtrl_Human_PC_JumpForward_call_zCModel_IsAniActive = ZenDef(0x00628CD0, 0x0064DF02, 0x006554B0, 0x006B1E40)
		INT text_oCAniCtrl_Human__Stand_cmp_protoAni__s_walkl = ZenDef(0x0062DE29, 0x006535FE, 0x0065AC39, 0x006B75C9)
		INT text_oCAniCtrl_Human__Stand_success_cmp_protoAni__s_walkl = ZenDef(0x0062DE78, 0x0065364A, 0x0065AC88, 0x006B7618)
		INT text_oCAniCtrl_Human__Stand_call_model_IsAniActive__s_aim = ZenDef(0x0062E002, 0x006537F9, 0x0065AE12, 0x006B77A2)
		INT text_oCAniCtrl_Human_CorrectAniStates_mov_reg_protoAni = ZenDef(0x006229E8, 0x00647198, 0x0064E878, 0x006AB0F8)
		INT text_oCAniCtrl_Human_CorrectAniStates_continue_search = text_oCAniCtrl_Human_CorrectAniStates_mov_reg_protoAni + 7
		INT text_oCAniCtrl_Human_DrawWeapon1_call_zCModel_GetAniFromAniID = ZenDef(0x006294CA, 0x0064E73A, 0x00655CAA, 0x006B263A)
		INT text_oCAniCtrl_Human_DrawWeapon1_test_eax_eax = ZenDef(0x006294D7, 0x0064E747, 0x00655CB7, 0x006B2647)
		INT text_zCModelNodeInst_CalcWeights_jne_blendState_2_1 = ZenDef(0x0056559B, 0x0057DF25, 0x0057A0FB, 0x0057F61B)
		INT text_zCModelNodeInst_CalcWeights_jne_blendState_2_2 = ZenDef(0x005655DB, 0x0057DF75, 0x0057A13B, 0x0057F65B)
		INT text_zCModel_AdvanceAnis_afterNodesBlending = ZenDef(0x00563817, 0x0057C062, 0x00578209, 0x0057D729)
		INT text_zCModel_StartAni_mov_ecx_protoAni = ZenDef(0x00561537, 0x00579C0B, 0x00575DD6, 0x0057B2F6)
		INT text_zCModel_StartAni_fail_cmp_layers = ZenDef(0x0056159D, 0x00579C7C, 0x00575E3C, 0x0057B35C)
		INT text_zCModel_StartAni_call_FadeOutAni = ZenDef(0x0056160C, 0x00579CEF, 0x00575EAB, 0x0057B3CB)
		INT text_zCModel_StartAni_call_FadeOutAni_end = text_zCModel_StartAni_call_FadeOutAni + 5
		INT text_zCModel_StartAni_cmp_startMode_2 = ZenDef(0x00561508, 0x00579BDC, 0x00575D98, 0x0057B2B8)
		INT text_zCModel_StartAni_cmp_startMode_2_end = text_zCModel_StartAni_cmp_startMode_2 + 18
		INT text_zCModel_IsStateActive_jnz_cmp_layers = ZenDef(0x00563D71, 0x0057C5F1, 0x005788C1, 0x0057DDE1)
		INT text_zCModel_IsStateActive_fail_cmp_layers = ZenDef(0x00563E77, 0x0057C6F6, 0x005789C7, 0x0057DEE7)
		
		INT field_oCAniCtrl_Human_do_jump = 0x170
		INT field_oCAniCtrl_Human__t_walk_2_aim = 0x10E8
		INT field_oCAniCtrl_Human__s_walk = 0x1008
		INT field_oCAniCtrl_Human__s_walkl = 0x1014
		INT field_oCAniCtrl_Human__s_walkr = 0x1020
		INT field_oCAniCtrl_Human__t_walk_2_walkl = 0x100C
		INT field_oCAniCtrl_Human__t_walkr_2_walk = 0x1024
		INT field_zCModelAniActive_isFadingOut = 0x1C
		INT field_zTNodeAni_modelAni = 0x0
		INT field_zTNodeAni_weight = 0x4
		INT field_zTNodeAni_blendState = 0xC
		INT field_zCModelNodeInst_nodeAniList = 0xCC
		INT field_zCModelNodeInst_numNodeAnis = 0x18C
		INT field_zCModel_numActiveAnis = 0x34
		INT field_zCModel_aniChannels = 0x38
		INT field_zCModelAni_aniID = 0x4C
		INT field_zCModelAni_aniName = 0x24
		INT field_zCModelAni_aniName_vector = field_zCModelAni_aniName + 8
		INT field_zCModel_nodeList = ZenDef(0x64, 0x64, 0x70, 0x70)
		INT field_zCModel_nodeList_numInArray = field_zCModel_nodeList + 8
		INT field_zCAIPlayer_model = 0x68
		
		INT sizeof_zTNodeAni = 0x20
		
		INT func_oCAIHuman_Pressed = ZenDef(0x0060F920, 0x006323C0, 0x00638E70, 0x00695540)
		INT func_oCAniCtrl_Human_IsWalking = ZenDef(0x006257E0, 0x0064A540, 0x00651860, 0x006AE0E0)
		INT func_zCModel_GetActiveAni = ZenDef(0x00560D90, 0x00579220, 0x00575640, 0x0057AB60)
		INT func_zCModel_StopAni = ZenDef(0x00560EE0, 0x00579370, 0x00575790, 0x0057ACB0)
		int func__strcmp  = ZenDef(0x0077C060, 0x007BFE20, 0x007C9480, 0x007D5940)
		
		INT const_GAME_ACTION = 5
		INT const_GAME_UP = 3
		INT const_GAME_DOWN = 4
		
		INT offset_str_S_SLIDE = ZenDef(0x0083AD4C, 0x0088096C, 0x00890AB0, 0x0089ECF8)
		INT offset_str_S_SLIDEB = ZenDef(0x0083AD40, 0x00880960, 0x00890AA4, 0x0089ECEC)
		// end of engine specific
		
		#assembler [text_oCNpc_EV_AttackForward_mov_edi_ptr_edx]
			mov edi, [edx]
			cmp [edi], ecx
			jne $text_oCNpc_EV_AttackForward_mov_edi_ptr_edx_after
			
			xor eax, eax
			cmp dword ptr [edi+$field_zCModelAniActive_isFadingOut], 0
			je check_reverse
			
			mov eax, 1
			
		check_reverse:
			cmp dword ptr [$engine_version], 2
			jg return
			
			neg eax
			inc eax
			
		return:
		#/assembler [text_oCNpc_EV_AttackForward_epilogue]
		
		HEX @text_oCNpc_SetWeaponMode2_jz_standing = 'EB'
		
		#assembler [text_oCAniCtrl_Human_CorrectAniStates_mov_reg_protoAni]
			cmp dword ptr [esi+$field_zCModelAniActive_isFadingOut], 0
			jne $text_oCAniCtrl_Human_CorrectAniStates_continue_search
	
			orgcode
		#/assembler
		
		#assembler [text_oCAniCtrl_Human_IsStateAniActive_cmp_layer]
			orgcode
			
			push eax
			mov eax, [edx]
			mov eax, [eax+$field_zCModelAniActive_isFadingOut]
			test eax, eax
			pop eax
			
			jnz $text_oCAniCtrl_Human_IsStateAniActive_fail_cmp_layer
		#/assembler
		
		// zCModelAniActive* zCModel::GetNotFadingAni(int)
		#assembler [func_zCModel_GetNotFadingAni]			
			mov edx, [esp+4]
			
			push esi
			mov esi, ecx
			
			push edi
			mov edi, edx
			
			push edi
			call $func_zCModel_GetActiveAni
			
			test eax, eax
			jz return
			
			mov edx, [eax+$field_zCModelAniActive_isFadingOut]
			test edx, edx
			jz return
			
			xor eax, eax
			
		return:
			pop edi
			pop esi
			ret 4
		#/assembler
		
		#assembler [func_zCModel_GetNotFadingProtoAni]
			mov eax, [esp+4]
			push eax
			call $func_zCModel_GetNotFadingAni
			
			test eax, eax
			jz return
			
			mov eax, [eax]
			
		return:
			ret 4
		#/assembler
		
		// int zCModel::IsNotFadingAniActive(zCModelAni*)
		#assembler [func_zCModel_IsNotFadingAniActive]
			mov eax, [esp+4]
			test eax, eax
			jz return
			
			mov eax, [eax+$field_zCModelAni_aniID]
			push eax
			
			call $func_zCModel_GetNotFadingAni
			
		return:
			ret 4
		#/assembler
		
		#assembler [text_oCAIHuman_BowMode_call_IsStanding_G1]
			push ecx
			orgcode
			pop ecx
			
			test eax, eax
			jnz return
			
			mov eax, [ecx+$field_oCAniCtrl_Human__t_walk_2_aim]
			push eax
			mov ecx, [ecx+$field_zCAIPlayer_model]
			call $func_zCModel_GetNotFadingAni
			
		return:
		#/assembler
		
		IF engine_version >= 3
			#assembler [text_oCAIHuman_BowMode_call_IsStanding_G2]
				orgcode
				
				test eax, eax
				jnz check_keys
				
				mov eax, [esi+$field_oCAniCtrl_Human__t_walk_2_aim]
				push eax
				mov ecx, [esi+$field_zCAIPlayer_model]
				call $func_zCModel_GetNotFadingAni
				jmp return
				
			check_keys:
				push $const_GAME_ACTION
				mov ecx, esi
				call $func_oCAIHuman_Pressed
				test eax, eax
				jnz return
				
				push $const_GAME_UP
				mov ecx, esi
				call $func_oCAIHuman_Pressed
				test eax, eax
				jnz return_false
				
				push $const_GAME_DOWN
				mov ecx, esi
				call $func_oCAIHuman_Pressed
				test eax, eax
				mov eax, 1
				jz return
				
			return_false:
				xor eax, eax
			
			return:
			#/assembler
		END
		
		#assembler [text_oCAniCtrl_Human_DrawWeapon1_call_zCModel_GetAniFromAniID]
			call $func_zCModel_GetNotFadingAni
		#/assembler [text_oCAniCtrl_Human_DrawWeapon1_test_eax_eax]
		
		// int oCAniCtrl_Human::HookIsWalking()
		#assembler [func_oCAniCtrl_Human_HookIsWalking]
			push esi
			push edi
			
			mov edi, [ecx+$field_zCAIPlayer_model]
			test edi, edi
			jz fail
			
			mov eax, [ecx+$field_oCAniCtrl_Human__t_walk_2_walkl]
			push eax
			
			mov eax, [ecx+$field_oCAniCtrl_Human__s_walkr]
			push eax
			
			mov eax, [ecx+$field_oCAniCtrl_Human__s_walkl]
			push eax
			
			mov esi, 2
			
		check:
			mov ecx, edi
			call $func_zCModel_GetNotFadingAni
			
			test eax, eax
			jnz return

			test esi, esi
			jz fail
			
			dec esi
			jmp check
			
		fail:
			xor eax, eax
			
		return:
			lea esp, [esp+esi*4]
			
			pop edi
			pop esi
			ret
		#/assembler
		
		JMP(func_oCAniCtrl_Human_IsWalking, func_oCAniCtrl_Human_HookIsWalking)
		
		#assembler [text_oCAniCtrl_Human_PC_JumpForward_call_zCModel_IsAniActive]
			add esp, 4
			mov eax, [esi+$field_oCAniCtrl_Human__s_walkl]
			push eax
			call $func_zCModel_GetNotFadingAni
		#/assembler
		
		#assembler [text_zCModel_StartAni_mov_ecx_protoAni]
			mov ecx, [eax]
			cmp ecx, ebp
			je continue
			
			mov ecx, [eax+$field_zCModelAniActive_isFadingOut]
			test ecx, ecx
			jnz $text_zCModel_StartAni_fail_cmp_layers
			
		continue:
			orgcode
		#/assembler
		
		#assembler [text_zCModel_StartAni_call_FadeOutAni]
			mov eax, [edi]			
			cmp eax, ebp
			jne continue
			
			call $func_zCModel_StopAni
			jmp $text_zCModel_StartAni_call_FadeOutAni_end
		
		continue:
			orgcode
		#/assembler
		
		#assembler [text_zCModel_StartAni_cmp_startMode_2]
			mov eax, [ebx+$field_zCModelAniActive_isFadingOut]
			test eax, eax
			jz continue
			
			push ebx
			mov ecx, esi
			call $func_zCModel_StopAni
			
			mov ecx, dword ptr [$engine_version]
			cmp ecx, 2
			jg num_in_ecx
			
			mov edx, [esi+$field_zCModel_numActiveAnis]
			jmp $text_zCModel_StartAni_cmp_startMode_2_end
			
		num_in_ecx:
			mov ecx, [esi+$field_zCModel_numActiveAnis]
			jmp $text_zCModel_StartAni_cmp_startMode_2_end
		
		continue:
			orgcode
		#/assembler
		
		// void zCModel::CheckFadeoutAnis()
		#assembler [func_zCModel_CheckFadeoutAnis]
			sub esp, 8 ; +8
			mov eax, ecx
			push ebp ; +12
			xor ebp, ebp
			mov [esp+4], eax
			cmp [eax+$field_zCModel_numActiveAnis], ebp
			jle return
	
			push ebx ; +16
			push esi ; +20
			lea ebx, [eax+$field_zCModel_aniChannels]
			xorps xmm1, xmm1
			push edi ; +24
			mov [esp+20], ebx
			
		mainLoop:
			mov esi, [ebx]
			cmp dword ptr [esi+$field_zCModelAniActive_isFadingOut], 0
			je continue
			
			xor edi, edi
			cmp [eax+$field_zCModel_nodeList_numInArray], edi
			jle innerLoopEnd
			
			mov ebx, [eax+$field_zCModel_nodeList]
			
		auxLoop:
			mov eax, [ebx]
			xor ecx, ecx
			mov edx, [eax+$field_zCModelNodeInst_numNodeAnis]
			test edx, edx
			jle auxLoopEnd
			
			add eax, $field_zCModelNodeInst_nodeAniList

		checkFaded:
			cmp [eax+$field_zTNodeAni_modelAni], esi
			jne auxLoopContinue
			
			cmp dword ptr [eax+$field_zTNodeAni_blendState], 2
			jne notFaded
			
			movss xmm0, [eax+$field_zTNodeAni_weight]
			comiss xmm0, xmm1
			ja notFaded
			
		auxLoopContinue:
			inc ecx
			add eax, $sizeof_zTNodeAni
			cmp ecx, edx
			jl checkFaded
			
		auxLoopEnd:
			mov eax, [esp+16]
			inc edi
			add ebx, 4
			cmp edi, [eax+$field_zCModel_nodeList_numInArray]
			jl auxLoop
			
			mov ebx, [esp+20]
			
		innerLoopEnd:
			push esi ; +28
			mov ecx, eax
			call $func_zCModel_StopAni ; +24
			dec ebp
			xorps xmm1, xmm1
			sub ebx, 4
			jmp skipEbx
			
		notFaded:
			mov ebx, [esp+20]
			
		skipEbx:
			mov eax, [esp+16]
			
		continue:
			inc ebp
			add ebx, 4
			mov [esp+20], ebx
			cmp ebp, [eax+$field_zCModel_numActiveAnis]
			jl mainLoop
			
			pop edi ; +20
			pop esi ; +16
			pop ebx ; +12
			
		return:
			pop ebp ; +8
			add esp, 8 ; +0
			ret
		#/assembler
		
		HEX @text_zCModelNodeInst_CalcWeights_jne_blendState_2_1 = 'EB'
		HEX @text_zCModelNodeInst_CalcWeights_jne_blendState_2_2 = 'EB'
		
		#assembler [text_zCModel_AdvanceAnis_afterNodesBlending]
			mov ecx, ebx
			call $func_zCModel_CheckFadeoutAnis
			orgcode
		#/assembler
		
		IF engine_version == 2
			#assembler [text_oCAniCtrl_Human__Stand_cmp_protoAni__s_walkl]
				cmp [edi], eax
				jne continue
				
				cmp dword ptr [edi+$field_zCModelAniActive_isFadingOut], 0
				je $text_oCAniCtrl_Human__Stand_success_cmp_protoAni__s_walkl
				
			continue:
				inc ecx
			#/assembler
		ELSE
			#assembler [text_oCAniCtrl_Human__Stand_cmp_protoAni__s_walkl]
				cmp [ebp], eax
				jne continue
				
				cmp dword ptr [ebp+$field_zCModelAniActive_isFadingOut], 0
				je $text_oCAniCtrl_Human__Stand_success_cmp_protoAni__s_walkl
				
			continue:
			#/assembler
		END
		
		CALL(text_oCAniCtrl_Human__Stand_call_model_IsAniActive__s_aim, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_1, func_zCModel_GetNotFadingProtoAni)
		CALL(text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_2, func_zCModel_GetNotFadingProtoAni)
		CALL(text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_3, func_zCModel_GetNotFadingProtoAni)
		CALL(text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_4, func_zCModel_GetNotFadingProtoAni)
		CALL(text_oCAniCtrl_Human__Forward_call_model_GetAniFromAniID_5, func_zCModel_GetNotFadingProtoAni)
		
		#assembler [text_oCAniCtrl_Human__Forward_call_model_IsAniActive]
			pop eax
			test eax, eax
			jz return
			
			mov eax, [eax+$field_zCModelAni_aniID]
			push eax
			call $func_zCModel_GetNotFadingAni
			
		return:
		#/assembler
		
		CALL(text_oCNpc_EV_DrawWeapon2_call_model_GetAniFromAniID_1, func_zCModel_GetNotFadingProtoAni)
		CALL(text_oCNpc_EV_DrawWeapon2_call_model_GetAniFromAniID_2, func_zCModel_GetNotFadingProtoAni)
		
		IF engine_version <= 2
			#assembler [text_oCAniCtrl_Human_IsParadeRunning_cmp_layer_G1]
				push eax
				
				mov eax, [esi+$field_zCModelAniActive_isFadingOut]
				test eax, eax
				
				pop eax
				
				jnz $text_oCAniCtrl_Human_IsParadeRunning_inc_eax_G1
				
				orgcode
			#/assembler
			
			#assembler [text_oCAniCtrl_Human_CanParade_cmp_layer_G1]
				push eax
				
				mov eax, [esi+$field_zCModelAniActive_isFadingOut]
				test eax, eax
				
				pop eax
				
				jnz $text_oCAniCtrl_Human_CanParade_inc_eax_G1
				
				orgcode
			#/assembler
		ELSE
			#assembler [text_oCAniCtrl_Human_IsParadeRunning_ani_check_success_G2]
				mov eax, [esi+$field_zCModelAniActive_isFadingOut]
				test eax, eax
				jnz $text_oCAniCtrl_Human_IsParadeRunning_ani_check_fail_G2
				
				orgcode
			#/assembler
			
			#assembler [text_oCAniCtrl_Human_CanParade_ani_check_success_G2]
				mov eax, [esi+$field_zCModelAniActive_isFadingOut]
				test eax, eax
				jnz $text_oCAniCtrl_Human_CanParade_ani_check_fail_G2
				
				orgcode
			#/assembler
		END
		
		IF engine_version == 1
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G1, func_zCModel_IsNotFadingAniActive)
			
			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G1_G1]
				mov ebp, [ecx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G1_G1
				add ebp, 7
				jmp ebp
				
			continue:
				orgcode
			#/assembler
			
			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G1_G1]
				mov ebp, [ecx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G1_G1
				add ebp, 7
				jmp ebp
				
			continue:
				orgcode
			#/assembler
		END
		
		IF engine_version == 2
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G1A, func_zCModel_IsNotFadingAniActive)

			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_edx__s_hitf_G1_G1A]
				mov ebp, [edx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_edx__s_hitf_G1_G1A
				add ebp, 7
				jmp ebp
				
			continue:
				orgcode
			#/assembler
			
			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_edx__t_hitback_G1_G1A]
				mov ebp, [edx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_edx__t_hitback_G1_G1A
				add ebp, 7
				jmp ebp
				
			continue:
				orgcode
			#/assembler
		END
		
		IF engine_version == 3
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G1_G2, func_zCModel_IsNotFadingAniActive)
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_hitf_G1_G2, func_zCModel_IsNotFadingAniActive)
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__t_hitback_G1_G2, func_zCModel_IsNotFadingAniActive)
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G2_G2, func_zCModel_IsNotFadingAniActive)
			
			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G2_G2]
				mov ebp, [ecx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__s_hitf_G2_G2
				add ebp, 11
				jmp ebp
				
			continue:
				orgcode
			#/assembler
			
			#assembler [text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G2_G2]
				mov ebp, [ecx]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAIHuman_BowMode_mov_ebp_ptr_ecx__t_hitback_G2_G2
				add ebp, 11
				jmp ebp
				
			continue:
				orgcode
			#/assembler
		END
		
		IF engine_version == 4
			#assembler [text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_aim_G1_G2A]
				mov ebx, [edx]
				mov ebx, [ebx+$field_zCModelAniActive_isFadingOut]
				test ebx, ebx
				jz continue
				
				mov ebx, $text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_aim_G1_G2A
				add ebx, 6
				jmp ebx
				
			continue:
				orgcode
			#/assembler
			
			#assembler [text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_hitf_G1_G2A]
				mov ebx, [edx]
				mov ebx, [ebx+$field_zCModelAniActive_isFadingOut]
				test ebx, ebx
				jz continue
				
				mov ebx, $text_oCAIHuman_BowMode_mov_ebx_ptr_edx__s_hitf_G1_G2A
				add ebx, 6
				jmp ebx
				
			continue:
				orgcode
			#/assembler
			
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__t_hitback_G1_G2A, func_zCModel_IsNotFadingAniActive)
			CALL(text_oCAIHuman_BowMode_call_model_IsAniActive__s_aim_G2_G2A, func_zCModel_IsNotFadingAniActive)
			
			#assembler [text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__s_hitf_G2_G2A]
				mov ebx, [ecx]
				mov ebx, [ebx+$field_zCModelAniActive_isFadingOut]
				test ebx, ebx
				jz continue
				
				mov ebx, $text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__s_hitf_G2_G2A
				add ebx, 6
				jmp ebx
				
			continue:
				orgcode
			#/assembler
			
			#assembler [text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__t_hitback_G2_G2A]
				mov ebx, [ecx]
				mov ebx, [ebx+$field_zCModelAniActive_isFadingOut]
				test ebx, ebx
				jz continue
				
				mov ebx, $text_oCAIHuman_BowMode_mov_ebx_ptr_ecx__t_hitback_G2_G2A
				add ebx, 6
				jmp ebx
				
			continue:
				orgcode
			#/assembler
		END
	
		#assembler [text_oCAIHuman_BowMode_call_IsStateAniActive__s_aim_G1]
			mov ecx, [esi+$field_zCAIPlayer_model]
			call $func_zCModel_GetNotFadingAni
		#/assembler
	
		IF engine_version >= 3
			#assembler [text_oCAIHuman_BowMode_call_IsStateAniActive__s_aim_G2]
				mov ecx, [esi+$field_zCAIPlayer_model]
				call $func_zCModel_GetNotFadingAni
			#/assembler
		END
		
		IF engine_version <= 2
			#assembler [text_oCAniCtrl_Human_TransitionToInvest_mov_ebp_ptr_esi__s_walk_G1]
				mov ebp, [esi]
				mov ebp, [ebp+$field_zCModelAniActive_isFadingOut]
				test ebp, ebp
				jz continue
				
				mov ebp, $text_oCAniCtrl_Human_TransitionToInvest_mov_ebp_ptr_esi__s_walk_G1
				add ebp, 7
				jmp ebp
				
			continue:
				orgcode
			#/assembler
		ELSE
			#assembler [text_oCAniCtrl_Human_TransitionToInvest_call_model_IsAniActive_G2]
				call $func_zCModel_IsNotFadingAniActive
			#/assembler
		END
		
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_1, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_2, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_3, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_4, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_5, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_6, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_7, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_8, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_9, func_zCModel_IsNotFadingAniActive)
		
		IF engine_version >= 3
			CALL(text_oCAniCtrl_Human_Turn_call_model_IsAniActive_10, func_zCModel_IsNotFadingAniActive)
		END
		
		IF engine_version <= 2
			CALL(text_oCNpc_InteractItemIsInState_call_model_IsAniActive_or_GetAniFromAniID, func_zCModel_IsNotFadingAniActive)
		ELSE
			CALL(text_oCNpc_InteractItemIsInState_call_model_IsAniActive_or_GetAniFromAniID, func_zCModel_GetNotFadingProtoAni)
		END
		
		#assembler [text_oCAniCtrl_Human_GetLayerAni_mov_ebx_ptr_eax]
			mov ebx, [eax+$field_zCModelAniActive_isFadingOut]
			test ebx, ebx
			jz continue
			
			mov ebx, $text_oCAniCtrl_Human_GetLayerAni_mov_ebx_ptr_eax
			add ebx, 7
			jmp ebx
			
		continue:
			orgcode
		#/assembler
		
		INT ignore_sliding_fading = 0
		
		#assembler [text_oCAniCtrl_Human_CheckFallStates_call_model_IsStateActive_s_falldn]
			mov dword ptr [$ignore_sliding_fading], 1
			orgcode
			mov dword ptr [$ignore_sliding_fading], 0
		#/assembler
		
		// int __stdcall IsSlidingAniName(const char*)
		#assembler [func_IsSlidingAniName]
			mov eax, [esp+4]
			test eax, eax
			jz return
			
			push eax
			push $offset_str_S_SLIDE
			call $func__strcmp
			add esp, 8
			test eax, eax
			jz return_true
			
			mov eax, [esp+4]
			push eax
			push $offset_str_S_SLIDEB
			call $func__strcmp
			add esp, 8
			test eax, eax
			jz return_true
			
			xor eax, eax
			jmp return
			
		return_true:
			mov eax, 1
		
		return:
			ret 4
		#/assembler
		
		#assembler [text_zCModel_IsStateActive_jnz_cmp_layers]
			orgcode
			
			cmp dword ptr [$ignore_sliding_fading], 0
			je do_test_fading
			
			push eax
			push ecx
			push edx
			
			mov eax, [ebp]
			mov eax, [eax]
			mov eax, [eax+$field_zCModelAni_aniName_vector]
			push eax
			call $func_IsSlidingAniName
			test eax, eax
			
			pop edx
			pop ecx
			pop eax
			
			jnz return
			
		do_test_fading:
			push eax
			mov eax, [ebp]
			mov eax, [eax+$field_zCModelAniActive_isFadingOut]
			test eax, eax
			pop eax
			
			jnz $text_zCModel_IsStateActive_fail_cmp_layers
			
		return:
		#/assembler
		
		CALL(text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_jump, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_hang, func_zCModel_IsNotFadingAniActive)
		CALL(text_oCAIHuman_PC_CheckSpecialStates_call_model_IsAniActive_s_woundedb, func_zCModel_IsNotFadingAniActive)
		
		#assembler [text_oCAIHuman_PC_CheckSpecialStates_cmp_ptr_edi_protoAni]
			cmp dword ptr [edi+$field_zCModelAniActive_isFadingOut], 0
			je continue
			
			mov edi, $text_oCAIHuman_PC_CheckSpecialStates_cmp_ptr_edi_protoAni
			add edi, 8
			jmp edi
			
		continue:
			orgcode
		#/assembler
		
		MemSet(text_oCAniCtrl_Human_CheckSpecialStates_call_SetPhysicsEnabled, '90', 9)
		
		// void __thiscall oCAIHuman::CalcDoJump()
		// ecx is not provided (esi or ebx is selected)
		#assembler [func_oCAIHuman_CalcDoJump]
			push esi
			push edi
			
			mov ecx, dword ptr [$engine_version]
			cmp ecx, 1
			je use_esi
			
			mov esi, ebx
			
		use_esi:
			mov edi, $field_oCAniCtrl_Human__s_walk
			
		process:
			cmp edi, $field_oCAniCtrl_Human__t_walkr_2_walk
			jg fail
		
			mov eax, esi
			add eax, edi
			mov eax, [eax]
			add edi, 4
			test eax, eax
			jle process
			
			push eax
			mov ecx, [esi+$field_zCAIPlayer_model]
			call $func_zCModel_GetNotFadingAni
			test eax, eax
			jz process
			
			mov eax, 1
			jmp return
			
			jmp process
			
		fail:
			xor eax, eax
			
		return:
			mov [esi+$field_oCAniCtrl_Human_do_jump], eax
			
			pop edi
			pop esi
			ret
		#/assembler

		CALL(text_oCAIHuman_PC_SpecialMove_SetDoJump_1, func_oCAIHuman_CalcDoJump)
		CALL(text_oCAIHuman_PC_SpecialMove_SetDoJump_2, func_oCAIHuman_CalcDoJump)
		
		HEX @(text_oCAIHuman_PC_SpecialMove_SetDoJump_1 + 5) = '90'
		HEX @(text_oCAIHuman_PC_SpecialMove_SetDoJump_2 + 5) = '90'
		
		IF engine_version >= 2
			CALL(text_oCAIHuman_PC_SpecialMove_SetDoJump_3, func_oCAIHuman_CalcDoJump)
			HEX @(text_oCAIHuman_PC_SpecialMove_SetDoJump_3 + 5) = '90'
		END
	#/patch
#/engine
